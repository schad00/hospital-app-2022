{"version":3,"sources":["../../projects/angular2-signaturepad/src/lib/angular2-signaturepad.component.ts","../../projects/angular2-signaturepad/src/lib/angular2-signaturepad.module.ts"],"names":["SignaturePad","elementRef","this","options","onBeginEvent","EventEmitter","onEndEvent","prototype","ngAfterContentInit","canvas","nativeElement","querySelector","canvasHeight","height","canvasWidth","width","signaturePad","SignaturePadNative.default","onBegin","bind","onEnd","ngOnDestroy","resizeCanvas","ratio","Math","max","window","devicePixelRatio","offsetWidth","offsetHeight","getContext","scale","clear","toData","fromData","points","toDataURL","imageType","quality","fromDataURL","dataURL","hasOwnProperty","isEmpty","off","on","set","option","value","emit","queryPad","Component","args","template","selector","ElementRef","Input","Output","NgModule","declarations","imports","exports"],"mappings":"6eAgCE,SAAAA,EAAYC,GAEVC,KAAKD,WAAaA,EAClBC,KAAKC,QAAUD,KAAKC,SAAW,GAC/BD,KAAKE,aAAe,IAAIC,EAAAA,aACxBH,KAAKI,WAAa,IAAID,EAAAA,oBAGjBL,EAAAO,UAAAC,mBAAA,WACL,IAAMC,EAAcP,KAAKD,WAAWS,cAAcC,cAAc,UAE3DT,KAAKC,QAAgBS,eACxBH,EAAOI,OAAUX,KAAKC,QAAgBS,cAGnCV,KAAKC,QAAgBW,cACxBL,EAAOM,MAASb,KAAKC,QAAgBW,aAGvCZ,KAAKc,aAAe,IAAIC,EAAAA,QAA2BR,EAAQP,KAAKC,SAChED,KAAKc,aAAaE,QAAUhB,KAAKgB,QAAQC,KAAKjB,MAC9CA,KAAKc,aAAaI,MAAQlB,KAAKkB,MAAMD,KAAKjB,OAGrCF,EAAAO,UAAAc,YAAA,WACL,IAAMZ,EAAcP,KAAKD,WAAWS,cAAcC,cAAc,UAChEF,EAAOM,MAAQ,EACfN,EAAOI,OAAS,GAGXb,EAAAO,UAAAe,aAAA,WAIL,IAAMC,EAAgBC,KAAKC,IAAIC,OAAOC,kBAAoB,EAAG,GACvDlB,EAAcP,KAAKc,aAAaP,OACtCA,EAAOM,MAAQN,EAAOmB,YAAcL,EACpCd,EAAOI,OAASJ,EAAOoB,aAAeN,EACtCd,EAAOqB,WAAW,MAAMC,MAAMR,EAAOA,GACrCrB,KAAKc,aAAagB,SAIbhC,EAAAO,UAAA0B,OAAA,WACL,OAAI/B,KAAKc,aACAd,KAAKc,aAAaiB,SAElB,IAKJjC,EAAAO,UAAA2B,SAAA,SAASC,GACdjC,KAAKc,aAAakB,SAASC,IAItBnC,EAAAO,UAAA6B,UAAA,SAAUC,EAAoBC,GACnC,OAAOpC,KAAKc,aAAaoB,UAAUC,EAAWC,IAIzCtC,EAAAO,UAAAgC,YAAA,SAAYC,EAAiBrC,QAAA,IAAAA,IAAAA,EAAA,KAG/BA,EAAQsC,eAAe,WACvBvC,KAAKC,QAAgBS,eAEtBT,EAAQU,OAAUX,KAAKC,QAAgBS,eAEpCT,EAAQsC,eAAe,UAAavC,KAAKC,QAAgBW,cAC5DX,EAAQY,MAASb,KAAKC,QAAgBW,aAExCZ,KAAKc,aAAauB,YAAYC,EAASrC,IAIlCH,EAAAO,UAAAyB,MAAA,WACL9B,KAAKc,aAAagB,SAIbhC,EAAAO,UAAAmC,QAAA,WACL,OAAOxC,KAAKc,aAAa0B,WAIpB1C,EAAAO,UAAAoC,IAAA,WACLzC,KAAKc,aAAa2B,OAIb3C,EAAAO,UAAAqC,GAAA,WACL1C,KAAKc,aAAa4B,MAIb5C,EAAAO,UAAAsC,IAAA,SAAIC,EAAgBC,GACzB,OAAQD,GACN,IAAK,eACH5C,KAAKc,aAAaP,OAAOI,OAASkC,EAClC,MACF,IAAK,cACH7C,KAAKc,aAAaP,OAAOM,MAAQgC,EACjC,MACF,QACE7C,KAAKc,aAAa8B,GAAUC,IAK3B/C,EAAAO,UAAAW,QAAA,WACLhB,KAAKE,aAAa4C,MAAK,IAIlBhD,EAAAO,UAAAa,MAAA,WACLlB,KAAKI,WAAW0C,MAAK,IAGhBhD,EAAAO,UAAA0C,SAAA,WACL,OAAO/C,KAAKc,uCArIfkC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oBACVC,SAAU,6DAnBVC,EAAAA,+CAsBCC,EAAAA,4BACAC,EAAAA,2BACAA,EAAAA,gBCnBH,iCALCC,EAAAA,SAAQN,KAAA,CAAC,CACRO,aAAc,CAAC1D,GACf2D,QAAS,GACTC,QAAS,CAAC5D","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  OnDestroy,\n} from '@angular/core';\n\nimport * as SignaturePadNative from 'signature_pad';\n\nexport interface Point {\n  x: number;\n  y: number;\n  time: number;\n}\n\nexport type PointGroup = Array<Point>;\n\n@Component({\n  template: '<canvas></canvas>',\n  selector: 'signature-pad',\n})\nexport class SignaturePad implements AfterContentInit, OnDestroy {\n  @Input() public options: any;\n  @Output() public onBeginEvent: EventEmitter<boolean>;\n  @Output() public onEndEvent: EventEmitter<boolean>;\n\n  private signaturePad: any;\n  private elementRef: ElementRef;\n\n  constructor(elementRef: ElementRef) {\n    // no op\n    this.elementRef = elementRef;\n    this.options = this.options || {};\n    this.onBeginEvent = new EventEmitter();\n    this.onEndEvent = new EventEmitter();\n  }\n\n  public ngAfterContentInit(): void {\n    const canvas: any = this.elementRef.nativeElement.querySelector('canvas');\n\n    if ((this.options as any).canvasHeight) {\n      canvas.height = (this.options as any).canvasHeight;\n    }\n\n    if ((this.options as any).canvasWidth) {\n      canvas.width = (this.options as any).canvasWidth;\n    }\n\n    this.signaturePad = new SignaturePadNative.default(canvas, this.options);\n    this.signaturePad.onBegin = this.onBegin.bind(this);\n    this.signaturePad.onEnd = this.onEnd.bind(this);\n  }\n\n  public ngOnDestroy(): void {\n    const canvas: any = this.elementRef.nativeElement.querySelector('canvas');\n    canvas.width = 0;\n    canvas.height = 0;\n  }\n\n  public resizeCanvas(): void {\n    // When zoomed out to less than 100%, for some very strange reason,\n    // some browsers report devicePixelRatio as less than 1\n    // and only part of the canvas is cleared then.\n    const ratio: number = Math.max(window.devicePixelRatio || 1, 1);\n    const canvas: any = this.signaturePad.canvas;\n    canvas.width = canvas.offsetWidth * ratio;\n    canvas.height = canvas.offsetHeight * ratio;\n    canvas.getContext('2d').scale(ratio, ratio);\n    this.signaturePad.clear(); // otherwise isEmpty() might return incorrect value\n  }\n\n  // Returns signature image as an array of point groups\n  public toData(): Array<PointGroup> {\n    if (this.signaturePad) {\n      return this.signaturePad.toData();\n    } else {\n      return [];\n    }\n  }\n\n  // Draws signature image from an array of point groups\n  public fromData(points: Array<PointGroup>): void {\n    this.signaturePad.fromData(points as any);\n  }\n\n  // Returns signature image as data URL (see https://mdn.io/todataurl for the list of possible paramters)\n  public toDataURL(imageType?: string, quality?: number): string {\n    return this.signaturePad.toDataURL(imageType, quality); // save image as data URL\n  }\n\n  // Draws signature image from data URL\n  public fromDataURL(dataURL: string, options: any = {}): void {\n    // set default height and width on read data from URL\n    if (\n      !options.hasOwnProperty('height') &&\n      (this.options as any).canvasHeight\n    ) {\n      options.height = (this.options as any).canvasHeight;\n    }\n    if (!options.hasOwnProperty('width') && (this.options as any).canvasWidth) {\n      options.width = (this.options as any).canvasWidth;\n    }\n    this.signaturePad.fromDataURL(dataURL, options);\n  }\n\n  // Clears the canvas\n  public clear(): void {\n    this.signaturePad.clear();\n  }\n\n  // Returns true if canvas is empty, otherwise returns false\n  public isEmpty(): boolean {\n    return this.signaturePad.isEmpty();\n  }\n\n  // Unbinds all event handlers\n  public off(): void {\n    this.signaturePad.off();\n  }\n\n  // Rebinds all event handlers\n  public on(): void {\n    this.signaturePad.on();\n  }\n\n  // set an option on the signaturePad - e.g. set('minWidth', 50);\n  public set(option: string, value: any): void {\n    switch (option) {\n      case 'canvasHeight':\n        this.signaturePad.canvas.height = value;\n        break;\n      case 'canvasWidth':\n        this.signaturePad.canvas.width = value;\n        break;\n      default:\n        this.signaturePad[option] = value;\n    }\n  }\n\n  // notify subscribers on signature begin\n  public onBegin(): void {\n    this.onBeginEvent.emit(true);\n  }\n\n  // notify subscribers on signature end\n  public onEnd(): void {\n    this.onEndEvent.emit(true);\n  }\n\n  public queryPad(): any {\n    return this.signaturePad;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SignaturePad } from './angular2-signaturepad.component';\n\n@NgModule({\n  declarations: [SignaturePad],\n  imports: [],\n  exports: [SignaturePad],\n})\nexport class SignaturePadModule {}\n"]}